import requests
import socket
import ssl
import nmap
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from colorama import init, Fore
import datetime

# Initialize colorama for colored output
init()

class WebVulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url if target_url.startswith(('http://', 'https://')) else f'http://{target_url}'
        self.domain = self.target_url.split('://')[1].split('/')[0]
        self.vulnerabilities = []
        
    def run_scan(self):
        """Run all security checks"""
        print(f"{Fore.BLUE}[*] Starting vulnerability scan for {self.target_url}{Fore.RESET}")
        
        self.check_http_headers()
        self.check_ssl_tls()
        self.scan_open_ports()
        self.check_xss_vulnerability()
        self.display_results()
        
    def check_http_headers(self):
        """Check for security headers"""
        print(f"{Fore.YELLOW}[*] Checking HTTP security headers...{Fore.RESET}")
        try:
            response = requests.get(self.target_url)
            headers = response.headers
            
            security_headers = {
                'Strict-Transport-Security': 'Missing HSTS header',
                'X-Content-Type-Options': 'Missing X-Content-Type-Options header',
                'X-Frame-Options': 'Missing X-Frame-Options header',
                'X-XSS-Protection': 'Missing X-XSS-Protection header',
                'Content-Security-Policy': 'Missing Content-Security-Policy header'
            }
            
            for header, message in security_headers.items():
                if header not in headers:
                    self.vulnerabilities.append(message)
                    
        except requests.exceptions.RequestException as e:
            self.vulnerabilities.append(f"Error checking HTTP headers: {str(e)}")
    
    def check_ssl_tls(self):
        """Check SSL/TLS configuration"""
        print(f"{Fore.YELLOW}[*] Checking SSL/TLS configuration...{Fore.RESET}")
        try:
            context = ssl.create_default_context()
            with socket.create_connection((self.domain, 443)) as sock:
                with context.wrap_socket(sock, server_hostname=self.domain) as ssock:
                    cert = ssock.getpeercert()
                    
                    # Check expiration
                    expires = datetime.datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y GMT')
                    days_to_expire = (expires - datetime.datetime.utcnow()).days
                    
                    if days_to_expire < 30:
                        self.vulnerabilities.append(f"SSL certificate will expire in {days_to_expire} days")
                    
                    # Check SSL version
                    if ssock.version() < 'TLSv1_2':
                        self.vulnerabilities.append("Outdated SSL/TLS version detected")
                    
        except Exception as e:
            self.vulnerabilities.append(f"Error checking SSL/TLS: {str(e)}")
    
    def scan_open_ports(self):
        """Scan for open ports"""
        print(f"{Fore.YELLOW}[*] Scanning for open ports...{Fore.RESET}")
        try:
            nm = nmap.PortScanner()
            nm.scan(self.domain, '21-23,80,443,8080,8443')
            
            for host in nm.all_hosts():
                for proto in nm[host].all_protocols():
                    ports = nm[host][proto].keys()
                    for port in ports:
                        state = nm[host][proto][port]['state']
                        if state == 'open':
                            self.vulnerabilities.append(f"Open port found: {port}/{proto}")
                            
        except Exception as e:
            self.vulnerabilities.append(f"Error scanning ports: {str(e)}")
    
    def check_xss_vulnerability(self):
        """Basic XSS vulnerability check"""
        print(f"{Fore.YELLOW}[*] Checking for XSS vulnerabilities...{Fore.RESET}")
        try:
            response = requests.get(self.target_url)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Check for forms
            forms = soup.find_all('form')
            for form in forms:
                inputs = form.find_all(['input', 'textarea'])
                if inputs:
                    self.vulnerabilities.append(f"Potential XSS vulnerability: Form found with input fields")
                    
        except requests.exceptions.RequestException as e:
            self.vulnerabilities.append(f"Error checking XSS: {str(e)}")
    
    def display_results(self):
        """Display scan results"""
        print("\n" + "="*50)
        print(f"{Fore.GREEN}Vulnerability Scan Results:{Fore.RESET}")
        print("="*50)
        
        if not self.vulnerabilities:
            print(f"{Fore.GREEN}No vulnerabilities found!{Fore.RESET}")
        else:
            for i, vuln in enumerate(self.vulnerabilities, 1):
                print(f"{Fore.RED}[{i}] {vuln}{Fore.RESET}")
        print("="*50)

def main():
    print(f"""{Fore.CYAN}
    Web Vulnerability Scanner
    ========================
    A simple tool to check for basic web vulnerabilities
    {Fore.RESET}""")
    
    target = input("Enter the target URL: ")
    scanner = WebVulnerabilityScanner(target)
    scanner.run_scan()

if __name__ == "__main__":
    main() 